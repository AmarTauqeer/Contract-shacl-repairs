@prefix base: <http://ontologies.atb-bremen.de/smashHitCore#> .
@prefix schema: <http://schema.org/> .
@prefix consent: <http://purl.org/adaptcentre/openscience/ontologies/consent#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix ex: <http://example.com/ns#> .

schema:CCV1stScenarioShape a sh:NodeShape ;
 sh:targetClass base:CCV1st;
 sh:and (
         [a sh:NodeShape;
          sh:property [
                sh:path base:hasContractCategory;
                sh:in (base:categoryBusinessToBusiness)
                  ]
         ]
         [a sh:NodeShape;
          sh:property [
                sh:path base:hasConsentState;
                sh:in ("empty")
                  ]
          ]
);
 sh:sparql [
 a sh:SPARQLConstraint ;
 sh:message "Violation occure the end date already passed." ;
 sh:select '''
    SELECT $this
    WHERE {
     $this base:hasStates ?state .
     $this base:hasEndDate ?edate .
     $this base:currentDateTime ?cdate .
     $this base:hasContractStatus ?cstatus .
    FILTER ((?state=base:statePending) && (?cdate > ?edate) && (?cstatus IN (base:statusCreated, base:statusUpdated, base:statusPending)))
    }
    ''' ;
 ] .
schema:CCVSecondScenarioShape a sh:NodeShape ;
 sh:targetClass base:CCVSecond;
 sh:and (
         [a sh:NodeShape;
          sh:property [
                sh:path base:hasContractCategory;
                sh:in (base:categoryBusinessToBusiness base:categoryBusinessToConsumer)
                  ]
         ]
         [a sh:NodeShape;
          sh:property [
                sh:path base:hasConsentState;
                sh:in ("Valid" "Invalid" "Expired")
                  ]
          ]
);
 sh:sparql [
 a sh:SPARQLConstraint ;
 sh:message "Violation: Consent has been expired already." ;
 sh:select '''
    SELECT $this
    WHERE {
     $this base:hasEndDate ?endDate .
     $this base:hasContractStatus ?contractStatus .
     $this base:hasStates ?state .
     $this base:hasConsentState ?consentState .
     FILTER ((?consentState IN ("Invalid","Expired")) && (?contractStatus IN (base:statusCreated, base:statusUpdated, base:statusPending)))
    }
    ''' ;
 ] .

schema:CCVthirdIfPartOrFifthScenarioShape a sh:NodeShape ;
 sh:targetClass base:CCVthirdIfPartOrFifth;
 sh:and (
         [a sh:NodeShape;
          sh:property [
                sh:path base:hasContractCategory;
                sh:in (base:categoryBusinessToConsumer)
                  ]
         ]
         [a sh:NodeShape;
          sh:property [
                sh:path base:hasConsentState;
                sh:in ("Valid" "Invalid" "Expired")
                  ]
          ]
);
 sh:sparql [
 a sh:SPARQLConstraint ;
 sh:message "Violation: Consent has been expired already." ;
 sh:select '''
    SELECT $this
    WHERE {
     $this base:hasEndDate ?endDate .
     $this base:hasContractStatus ?contractStatus .
     $this base:hasStates ?state .
     $this base:hasConsentState ?consentState .
     FILTER ((?consentState IN ("Invalid","Expired")) && (?contractStatus IN (base:statusCreated, base:statusUpdated, base:statusPending)))
    }
    ''' ;
 ] .
schema:CCVThirdScenarioElsePartShape a sh:NodeShape ;
 sh:targetClass base:CCVThirdElse;
 sh:and (
         [a sh:NodeShape;
          sh:property [
                sh:path base:hasContractCategory;
                sh:in (base:categoryBusinessToConsumer)
                  ]
         ]
         [a sh:NodeShape;
          sh:property [
                sh:path base:hasConsentState;
                sh:in ("Valid")
                  ]
          ]
);
 sh:sparql [
 a sh:SPARQLConstraint ;
 sh:message "Violation: Contract end date has been passed." ;
 sh:select '''
    SELECT $this
    WHERE {
     $this base:hasStates ?state .
     $this base:hasEndDate ?edate .
     $this base:currentDateTime ?cdate .
     $this base:hasContractStatus ?cstatus .
    FILTER ((?state=base:statePending) && (?cdate > ?edate) && (?cstatus IN (base:statusCreated, base:statusUpdated, base:statusPending)))
    }
    ''' ;
 ] .
schema:CCVFourthScenarioShape a sh:NodeShape ;
 sh:targetClass base:CCVFourth;
 sh:and (
         [a sh:NodeShape;
          sh:property [
                sh:path base:hasContractCategory;
                sh:in (base:categoryBusinessToConsumer)
                  ]
         ]
         [a sh:NodeShape;
          sh:property [
                sh:path base:hasConsentState;
                sh:in ("empty")
                  ]
          ]
);
 sh:sparql [
 a sh:SPARQLConstraint ;
 sh:message "Violation: Contract end date has been passed." ;
 sh:select '''
    SELECT $this
    WHERE {
     $this base:hasStates ?state .
     $this base:hasEndDate ?edate .
     $this base:currentDateTime ?cdate .
     $this base:hasContractStatus ?cstatus .
    FILTER ((?state=base:statePending) && (?cdate > ?edate) && (?cstatus IN (base:statusUpdated, base:statusCreated, base:statusPending)))
    }
    ''' ;
 ] .

